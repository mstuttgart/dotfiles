#!/bin/bash

set -eu

# Variables for dotfiles repo.
GIT_USER="mstuttgart"
GIT_REPO="dotfiles"

# colors to log
RED='\e[31m'
YELLOW='\e[33m'
GREEN='\e[32m'
BOLDBLUE="\e[1;34m"
BOLDGREEN="\e[1;32m"
ENDCOLOR="\e[0m"

# log functions
function echo_nl {
  echo ""
}

function echo_print {
  echo -e "${BOLDBLUE}=> $1 ${ENDCOLOR}"
}

function echo_info {
  echo -e "${BOLDGREEN}[info] $1 ${ENDCOLOR}"
}

function echo_ok {
  echo -e "${GREEN}[ok] $1 ✔${ENDCOLOR}"
}

function echo_warning {
  echo -e "${YELLOW}[alert] $1 ${ENDCOLOR}"
}

function echo_error {
  echo -e "${RED}[error] ✖ $1 ✖ ${ENDCOLOR}"
}

function check_return_code {

  # The $1 is $?, the result of last command
  if [ "$1" -eq 0 ]; then
    echo_ok "$2"
  else
    echo_error "$2"
    exit 1
  fi

  echo_nl
}

function print_header {
  clear
  echo -e "${BOLDBLUE}

██████╗  ██████╗ ████████╗███████╗██╗██╗     ███████╗███████╗
██╔══██╗██╔═══██╗╚══██╔══╝██╔════╝██║██║     ██╔════╝██╔════╝
██║  ██║██║   ██║   ██║   █████╗  ██║██║     █████╗  ███████╗
██║  ██║██║   ██║   ██║   ██╔══╝  ██║██║     ██╔══╝  ╚════██║
██████╔╝╚██████╔╝   ██║   ██║     ██║███████╗███████╗███████║
╚═════╝  ╚═════╝    ╚═╝   ╚═╝     ╚═╝╚══════╝╚══════╝╚══════╝

  ${YELLOW}BOOTSTRAP SCRiPT${BOLDGREEN}

" >&1
}

function print_footer {
  echo -e "${BOLDGREEN}
  Bootstrap of dotfiles completed!${YELLOW}
  Log out${BOLDBLUE} and${YELLOW} login${BOLDBLUE} to apply changes!${ENDCOLOR}

" >&1
}

function update_distro {
  echo_info "Update System"
  sudo pacman -Syu
}

function update_yadm_repo {
  echo_print "Updating the yadm repo origin URL"
  yadm remote set-url origin "git@github.com:${GIT_USER}/${GIT_REPO}.git"
  echo_ok "origin set"
}

function install_nvim {

  NVIM_PKG=(
    "neovim"
    "ripgrep"
    "fd"
    "python-pip"
    "nodejs"
    "npm"
    "gcc"
    "git"
    "python3"
    "python-pip"
    "rust"
    "ttf-jetbrains-mono-nerd"
    "ttf-sourcecodepro-nerd"
    "xclip"
  )

  for app in "${NVIM_PKG[@]}"; do

    echo_info "-----------------------------------------------"
    echo_print "Installing $app"

    # Install app
    sudo pacman -S "$app" --noconfirm

    # The $? get result of last command
    check_return_code $? "$app"

  done

  echo_ok "nvim installed"
}

function install_i3wm {

  i3wm_pkg=(
    "acpi"
    "arandr"
    "arc-gtk-theme-eos"
    "archlinux-xdg-menu"
    "awesome-terminal-fonts"
    "dex"
    "dmenu"
    "dunst"
    "eos-settings-i3wm"
    "endeavouros-xfce4-terminal-colors"
    "eos-lightdm-slick-theme"
    "eos-qogir-icons"
    "galculator"
    "gsimplecal"
    "gvfs"
    "gvfs-afc"
    "gvfs-gphoto2"
    "gvfs-mtp"
    "gvfs-nfs"
    "gvfs-smb"
    "i3-wm"
    "i3lock"
    "jq"
    "lightdm"
    "lightdm-slick-greeter"
    "nwg-look"
    "mpv"
    "network-manager-applet"
    "neofetch"
    "nitrogen"
    "numlockx"
    "picom"
    "playerctl"
    "polybar"
    "polkit-gnome"
    "rofi"
    "scrot"
    "sysstat"
    "thunar"
    "thunar-archive-plugin"
    "thunar-volman"
    "tumbler"
    "unzip"
    "viewnior"
    "xarchiver"
    "xbindkeys"
    "xdg-user-dirs-gtk"
    "xed"
    "xorg-xbacklight"
    "xorg-xdpyinfo"
    "zip"
    "ttf-jetbrains-mono-nerd"
    "ttf-sourcecodepro-nerd"
  )
  echo

  for app in "${i3wm_pkg[@]}"; do

    echo_info "-----------------------------------------------"
    echo_print "Installing $app"

    # Install app
    sudo pacman -S "$app" --noconfirm

    # The $? get result of last command
    check_return_code $? "$app"

  done

}

function install_zsh {
  echo_print "Install and configure ZSH"

  zsh_pkg=(
    zsh
    curl
    starship
  )

  echo

  for app in "${zsh_pkg[@]}"; do
    echo_print "Installing $app"

    # Install app
    sudo pacman -S "$app" --noconfirm

    # The $? get result of last command
    check_return_code $? "$app"

  done

  if [ ! -d "$HOME/.zplug" ]; then
    echo_info "Install zplug"
    curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
  fi

  if [ "$(basename "$SHELL")" != 'zsh' ]; then
    echo_info "Change Shell to Zsh"
    chsh -s /bin/zsh
  fi

  echo_nl
}

function install_packages {

  PacmanPackages=(
    # cli apps
    "bat"
    "btop"
    "curl"
    "exa"
    "lazygit"
    "net-tools"
    "p7zip"
    "pass"
    "pwgen"
    "unrar"
    "wget"

    # Programming
    "alacritty"
    "cmake"
    "docker"
    "docker-buildx"
    "docker-compose"
    "gcc"
    "git"
    "make"
    "nodejs"
    "npm"
    "python-pip"
    "python-pipx"
    "python3"
    "rust"
    "tig"

    # apps
    "filezilla"
    "firefox"
    "flameshot"
    "foliate"
    "font-manager"
    "gimp"
    "gpick"
    "meld"
    "poedit"
    "poedit"
    "spotify-launcher"
    "transmission-gtk"
    "tmux"

    # UI
    "ttf-jetbrains-mono-nerd"
    "ttf-sourcecodepro-nerd"
  )

  echo_info "Update Packages"
  sudo pacman -Syu

  echo_info "Install Arch packages"

  for app in "${PacmanPackages[@]}"; do

    echo_info "-----------------------------------------------"
    echo_print "Installing $app"

    # Install app
    sudo pacman -S "$app" --noconfirm

    # The $? get result of last command
    check_return_code $? "$app"

  done

  AURPackages=(
    "teams-for-linux"
    "postman-bin"
  )

  for app in "${AURPackages[@]}"; do

    echo_info "-----------------------------------------------"
    echo_print "Installing $app"

    # Install app
    yay -S "$app" --noconfirm

    # The $? get result of last command
    check_return_code $? "$app"

  done

  # Avoid use sudo do run docker
  sudo usermod -aG docker "$USER"

  # Habilita e inicia o servidor do docker
  sudo systemctl enable docker
  sudo systemctl start docker

  # install tmux plugin manager
  if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  fi

  # Install asdf version manager
  if [ ! -d "$HOME/.asdf" ]; then
    git clone https://github.com/asdf-vm/asdf.git "$HOME/.asdf" --branch v0.13.1
  fi

  # Install python and nodejs plugins
  ./.asdf/bin/asdf plugin-add python
  ./.asdf/bin/asdf plugin-add nodejs

  # Install python versions
  ./.asdf/bin/asdf install python 3.8.10
  ./.asdf/bin/asdf install python 3.10.9

}

# Because Git submodule commands cannot operate without a work tree, they must
# be run from within $HOME (assuming this is the root of your dotfiles)
cd "$HOME" || exit

print_header

PS3="Select action please: "

items=("Update System" "Install Packages" "Install Neovim" "Install i3wm" "Install ZSH")

while true; do
  select item in "${items[@]}" Quit; do
    case $REPLY in
    1)
      echo "Selected item #$item"
      update_distro
      echo
      break
      ;;
    2)
      echo "Selected item #$item"
      install_packages
      echo
      break
      ;;
    3)
      echo "Selected item #$item"
      install_nvim
      echo
      break
      ;;
    4)
      echo "Selected item #$item"
      install_i3wm
      echo
      break
      ;;
    5)
      echo "Selected item #$item"
      install_zsh
      echo
      break
      ;;
    $((${#items[@]} + 1)))
      echo "We're done!"
      print_footer
      break 2
      ;;
    *)
      echo "Ooops - unknown choice $REPLY"
      break
      ;;
    esac
  done
done
