#!/bin/bash

set -eu

# Variables for dotfiles repo.
GIT_USER="mstuttgart"
GIT_REPO="dotfiles"

# Set user bin directory.
USER_BIN_DIR="$HOME/.local/bin"
USER_FONT_DIR="$HOME/.local/bin"

# colors to log
RED='\e[31m'
YELLOW='\e[33m'
GREEN='\e[32m'
BOLDBLUE="\e[1;34m"
BOLDGREEN="\e[1;32m"
ENDCOLOR="\e[0m"

# log functions
function echo_nl {
	echo ""
}

function echo_print {
	echo -e "${BOLDBLUE}=> $1 ${ENDCOLOR}"
}

function echo_info {
	echo -e "${BOLDGREEN}[info] $1 ${ENDCOLOR}"
}

function echo_ok {
	echo -e "${GREEN}[ok] $1 ✔${ENDCOLOR}"
}

function echo_warning {
	echo -e "${YELLOW}[alert] $1 ${ENDCOLOR}"
}

function echo_error {
	echo -e "${RED}[error] ✖ $1 ✖ ${ENDCOLOR}"
}

function check_return_code {

	# The $1 is $?, the result of last command
	if [ "$1" -eq 0 ]; then
		echo_ok "$2"
	else
		echo_error "$2"
		exit 1
	fi

	echo_nl
}

function print_header {
	clear
	echo -e "${BOLDBLUE}

██████╗  ██████╗ ████████╗███████╗██╗██╗     ███████╗███████╗
██╔══██╗██╔═══██╗╚══██╔══╝██╔════╝██║██║     ██╔════╝██╔════╝
██║  ██║██║   ██║   ██║   █████╗  ██║██║     █████╗  ███████╗
██║  ██║██║   ██║   ██║   ██╔══╝  ██║██║     ██╔══╝  ╚════██║
██████╔╝╚██████╔╝   ██║   ██║     ██║███████╗███████╗███████║
╚═════╝  ╚═════╝    ╚═╝   ╚═╝     ╚═╝╚══════╝╚══════╝╚══════╝

  ${YELLOW}BOOTSTRAP SCRiPT${BOLDGREEN}

" >&1
}

function print_footer {
	echo -e "${BOLDGREEN}
  Bootstrap of dotfiles completed!${YELLOW}
  Log out${BOLDBLUE} and${YELLOW} login${BOLDBLUE} to apply changes!${ENDCOLOR}

" >&1
}

function update_distro {
	sudo apt update
	sudo apt upgrade -y
  sudo apt autoremove -y
}

function update_yadm_repo {
	echo_print "Updating the yadm repo origin URL"
	yadm remote set-url origin "git@github.com:${GIT_USER}/${GIT_REPO}.git"
	echo_ok "origin set"
}

function install_nvim {

	NVIM_PKG=(
		# nvim
		"exuberant-ctags"
		"ncurses-term"
		"ripgrep"
		"fd-find"
		"fzf"
		"xclip"
	)

	echo_print "Installing nvim"

	echo_info "Downloading nvim..."
	curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
	chmod u+x nvim.appimage
	mv nvim.appimage nvim

	echo_info "Move nvim appimage to /usr/bin"
	sudo mv nvim /usr/bin

	for app in "${NVIM_PKG[@]}"; do

		echo_print "Installing $app"

		# Install app
		sudo apt install "$app" -y

		# The $? get result of last command
		check_return_code $? "$app"

	done

	echo_ok "nvim installed"
}

function install_i3wm {

	i3wm_pkg=(
		# i3
		"i3"
		"i3lock"
		"netctl"
		"nitrogen"
		"compton"
		"rofi"
		"light" # brightness control
		"hsetroot"
		"fonts-noto"
		"fonts-mplus"
		"xsettingsd"
		"netctl"
		"lxappearance"
		"polybar"
		"playerctl"
		"numlockx"
	  "acpi" # battery info
		"gsimplecal"
		"neofetch"
		"imagemagick"
		"arandr"
	)
	echo

	for app in "${i3wm_pkg[@]}"; do
		echo_print "Installing $app"

		# Install app
		sudo apt install "$app" -y

		# The $? get result of last command
		check_return_code $? "$app"

	done

}

function install_asdf {
	echo_print "Install and configure asdf"

	ASDF_PATH_DIR="$HOME/.asdf"

	if [ ! -d "$ASDF_PATH_DIR" ]; then

		plugins=(
			nodejs
			python
		)

		git clone https://github.com/asdf-vm/asdf.git "$ASDF_PATH_DIR" --branch v0.13.1

		for plugin in "${plugins[@]}"; do
			asdf plugin-add "$plugin"
		done

		echo_nl
	fi

}

function install_zsh {
	echo_print "Install and configure ZSH"

	echo_info "Install ZSH"
	sudo apt install zsh curl -y
	check_return_code $? zsh

	if [ ! -d "$HOME/.zplug" ]; then
		echo_info "Install zplug"
		curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
	fi

	if [ "$(basename "$SHELL")" != 'zsh' ]; then
		echo_info "Change Shell to Zsh"
		chsh -s /bin/zsh
	fi

	echo_nl
}

function install_ranger {

	ranger_pkg=(
		"ranger"
		"w3m-img"
		"ffmpegthumbnailer"
		"highlight"
		"unrar"
		"unzip"
		"mediainfo"
		"mpv"
	)

	for app in "${ranger_pkg[@]}"; do
		echo_print "Installing $app"

		# Install app
		sudo apt install "$app" -y

		# The $? get result of last command
		check_return_code $? "$app"

	done
}

function install_fonts {
	echo_print "Download and Install Nerd Fonts"

	TEMP_DIR="/tmp/nerd-fonts"

	if [ ! -d /tmp/nerd-fonts ]; then
		echo_info "Clone Nerd Font Repositorie"
		git clone --depth 1 git@github.com:ryanoasis/nerd-fonts.git "$TEMP_DIR"
	fi

	cd "$TEMP_DIR"

	echo_info "Install Font JetBrainsMono"
	./install.sh -q JetBrainsMono 

	echo_info "Install Font SourceCodePro"
	./install.sh -q SourceCodePro 

	echo_info "Update font cache"
	fc-cache -f -v >/dev/null 2>&1

}

function install_packages {
	Apps=(
		# basic apps
		"p7zip"
		"p7zip-full"
		"p7zip-rar"
		"rar"
		"software-properties-common"
		"ubuntu-restricted-extras"
		"unace-nonfree"
		"unrar"
		"uuid-runtime"
		"wget"
		"curl"
		"net-tools"
		"pwgen"
		"openssh-server"
		"pass"
		"bat"
		"exa"
		"pgcli"
		"zathura"

		# Programming
		"build-essential"
		"cmake"
		"g++"
		"libsqlite3-dev"
		"llvm"
		"make"
		"git"
		"tig"
		"kitty"
		"curl"

		# python
		"python3-dev"
		"python3-pip"
		"python3-venv"

		# apps
		"gpick"
		"flameshot"
		"gdebi"
		"libreoffice"
		"openssh-server"
		"poedit"
		"filezilla"
		"firefox"
		"gpick"
		"gimp"
		"libreoffice"
		"poedit"
		"thunar"
		"spotify-client"

		# themes
		"arc-theme"
		"font-manager"
		"fonts-powerline"
	)

	echo_info "Install Ubuntu packages"

	for app in "${Apps[@]}"; do
		echo_print "Installing $app"

		# Install app
		sudo apt install "$app" -y

		# The $? get result of last command
		check_return_code $? "$app"

	done

	echo_info "Install pip packages"
        pip install pipx --user
        pipx install atty

}

# Because Git submodule commands cannot operate without a work tree, they must
# be run from within $HOME (assuming this is the root of your dotfiles)
cd "$HOME" || exit

# disable sleep
sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target

print_header
# update_yadm_repo
# update_distro
# install_packages
# install_zsh
install_nvim
# install_asdf
# install_i3wm
# install_ranger
# install_fonts
# update_distro
# print_footer
